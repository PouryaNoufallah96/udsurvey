import{O as x,r as d,P as O,Q as C,R as k,u as B,S as M}from"./entry.87f1605d.js";const z=()=>null;function E(...i){var h,v,m,_,D,g,b,w;const u=typeof i[i.length-1]=="string"?i.pop():void 0;typeof i[0]!="string"&&i.unshift(u);let[n,l,e={}]=i;if(typeof n!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");e.server=(h=e.server)!=null?h:!0,e.default=(v=e.default)!=null?v:z,e.defer&&console.warn("[useAsyncData] `defer` has been renamed to `lazy`. Support for `defer` will be removed in RC."),e.lazy=(_=(m=e.lazy)!=null?m:e.defer)!=null?_:!1,e.initialCache=(D=e.initialCache)!=null?D:!0;const a=x(),c=()=>(a.isHydrating||e.initialCache)&&a.payload.data[n]!==void 0;a._asyncData[n]||(a._asyncData[n]={data:d(c()?a.payload.data[n]:(b=(g=e.default)==null?void 0:g.call(e))!=null?b:null),pending:d(!c()),error:d((w=a.payload._errors[n])!=null?w:null)});const t={...a._asyncData[n]};t.refresh=(o={})=>a._asyncDataPromises[n]?a._asyncDataPromises[n]:o._initial&&c()?a.payload.data[n]:(t.pending.value=!0,a._asyncDataPromises[n]=new Promise((s,r)=>{try{s(l(a))}catch(f){r(f)}}).then(s=>{e.transform&&(s=e.transform(s)),e.pick&&(s=R(s,e.pick)),t.data.value=s,t.error.value=null}).catch(s=>{var r,f;t.error.value=s,t.data.value=B((f=(r=e.default)==null?void 0:r.call(e))!=null?f:null)}).finally(()=>{t.pending.value=!1,a.payload.data[n]=t.data.value,t.error.value&&(a.payload._errors[n]=!0),delete a._asyncDataPromises[n]}),a._asyncDataPromises[n]);const y=()=>t.refresh({_initial:!0}),P=e.server!==!1&&a.payload.serverRendered;{const o=M();if(o&&!o._nuxtOnBeforeMountCbs){o._nuxtOnBeforeMountCbs=[];const r=o._nuxtOnBeforeMountCbs;o&&(O(()=>{r.forEach(f=>{f()}),r.splice(0,r.length)}),C(()=>r.splice(0,r.length)))}P&&a.isHydrating&&n in a.payload.data?t.pending.value=!1:o&&(a.payload.serverRendered&&a.isHydrating||e.lazy)?o._nuxtOnBeforeMountCbs.push(y):y(),e.watch&&k(e.watch,()=>t.refresh());const s=a.hook("app:data:refresh",r=>{if(!r||r.includes(n))return t.refresh()});o&&C(s)}const p=Promise.resolve(a._asyncDataPromises[n]).then(()=>t);return Object.assign(p,t),p}function R(i,u){const n={};for(const l of u)n[l]=i[l];return n}export{E as u};
